---
import { getCollection } from "astro:content";
import Posts from "@layouts/Posts.astro";
import PostDetails from "@layouts/PostDetails.astro";
import getSortedPosts from "@utils/getSortedPosts";
import getPageNumbers from "@utils/getPageNumbers";
import getPagination from "@utils/getPagination";
import { formatJekyllPost } from "../utils/astro-jekyl";

export async function getStaticPaths() {
  const posts = await getCollection("blog");

  const formatFunction = formatJekyllPost();

  // this is so that preview works in frontmatter vs code plugin
  const postResultWithDashesOnly = posts.map((post) => {
    return {
      params: { slug: post.slug },
      props: { post },
    };

  });

  const pages = posts
    // .filter(x =>
    //   x.slug.includes("my-typescript-skills-improving-and-best-practice")
    // )
    .map(post => {
      const updatedPost = formatFunction(post);
      return {
        slug: updatedPost.slug.toString(), //post.slug.toString() + "/", // "2023/12/5/my-typescript-skills-improving-and-best-practices/",
        post: updatedPost,
      };
    });


  const postResult = pages.map(({ slug, post }) => {
    const postFormatted = formatFunction(post);
    return {
      params: { slug },
      props: { post: postFormatted },
    };
  });

  

  const pagePaths = getPageNumbers(posts.length).map(pageNum => ({
    params: { slug: `posts/${String(pageNum)}` },
  }));

  return [...postResult, ...postResultWithDashesOnly, ...pagePaths];
}

const { post } = Astro.props;
const { slug } = Astro.params;

const posts = await getCollection("blog");

const formatFunction = formatJekyllPost();
const postResults = posts.map(formatFunction);

const sortedPosts = getSortedPosts(postResults);

const pageNumber = parseInt(slug.split("/")[1], 10);

const pagination = getPagination({
  posts: sortedPosts,
  page: pageNumber,
});

const isEmptyObject = (obj: any) =>
  !obj ? true : Object.keys(obj).length === 0;
---

{!isEmptyObject(post) ? <PostDetails post={post} /> : <Posts {...pagination} />}
